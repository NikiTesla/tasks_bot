// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "tasks_bot/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// AddChat provides a mock function with given fields: ctx, chatID, username, role
func (_m *Storage) AddChat(ctx context.Context, chatID int64, username string, role domain.Role) error {
	ret := _m.Called(ctx, chatID, username, role)

	if len(ret) == 0 {
		panic("no return value specified for AddChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, domain.Role) error); ok {
		r0 = rf(ctx, chatID, username, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_AddChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChat'
type Storage_AddChat_Call struct {
	*mock.Call
}

// AddChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - username string
//   - role domain.Role
func (_e *Storage_Expecter) AddChat(ctx interface{}, chatID interface{}, username interface{}, role interface{}) *Storage_AddChat_Call {
	return &Storage_AddChat_Call{Call: _e.mock.On("AddChat", ctx, chatID, username, role)}
}

func (_c *Storage_AddChat_Call) Run(run func(ctx context.Context, chatID int64, username string, role domain.Role)) *Storage_AddChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(domain.Role))
	})
	return _c
}

func (_c *Storage_AddChat_Call) Return(_a0 error) *Storage_AddChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_AddChat_Call) RunAndReturn(run func(context.Context, int64, string, domain.Role) error) *Storage_AddChat_Call {
	_c.Call.Return(run)
	return _c
}

// AddMessage provides a mock function with given fields: ctx, message
func (_m *Storage) AddMessage(ctx context.Context, message domain.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for AddMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_AddMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMessage'
type Storage_AddMessage_Call struct {
	*mock.Call
}

// AddMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message domain.Message
func (_e *Storage_Expecter) AddMessage(ctx interface{}, message interface{}) *Storage_AddMessage_Call {
	return &Storage_AddMessage_Call{Call: _e.mock.On("AddMessage", ctx, message)}
}

func (_c *Storage_AddMessage_Call) Run(run func(ctx context.Context, message domain.Message)) *Storage_AddMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Message))
	})
	return _c
}

func (_c *Storage_AddMessage_Call) Return(_a0 error) *Storage_AddMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_AddMessage_Call) RunAndReturn(run func(context.Context, domain.Message) error) *Storage_AddMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() {
	_m.Called()
}

// Storage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Storage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Storage_Expecter) Close() *Storage_Close_Call {
	return &Storage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Storage_Close_Call) Run(run func()) *Storage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_Close_Call) Return() *Storage_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Storage_Close_Call) RunAndReturn(run func()) *Storage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// IsAdmin provides a mock function with given fields: ctx, chatID
func (_m *Storage) IsAdmin(ctx context.Context, chatID int64) (bool, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_IsAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAdmin'
type Storage_IsAdmin_Call struct {
	*mock.Call
}

// IsAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *Storage_Expecter) IsAdmin(ctx interface{}, chatID interface{}) *Storage_IsAdmin_Call {
	return &Storage_IsAdmin_Call{Call: _e.mock.On("IsAdmin", ctx, chatID)}
}

func (_c *Storage_IsAdmin_Call) Run(run func(ctx context.Context, chatID int64)) *Storage_IsAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Storage_IsAdmin_Call) Return(_a0 bool, _a1 error) *Storage_IsAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_IsAdmin_Call) RunAndReturn(run func(context.Context, int64) (bool, error)) *Storage_IsAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveMessages provides a mock function with given fields: ctx
func (_m *Storage) RetrieveMessages(ctx context.Context) ([]domain.Message, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveMessages")
	}

	var r0 []domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_RetrieveMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveMessages'
type Storage_RetrieveMessages_Call struct {
	*mock.Call
}

// RetrieveMessages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Storage_Expecter) RetrieveMessages(ctx interface{}) *Storage_RetrieveMessages_Call {
	return &Storage_RetrieveMessages_Call{Call: _e.mock.On("RetrieveMessages", ctx)}
}

func (_c *Storage_RetrieveMessages_Call) Run(run func(ctx context.Context)) *Storage_RetrieveMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Storage_RetrieveMessages_Call) Return(_a0 []domain.Message, _a1 error) *Storage_RetrieveMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_RetrieveMessages_Call) RunAndReturn(run func(context.Context) ([]domain.Message, error)) *Storage_RetrieveMessages_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
